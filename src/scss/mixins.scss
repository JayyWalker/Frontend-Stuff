//
// Mixins
//
// @author Jordan Walker <jordan@jayy.online>
// 

//
// Responsive
//

// --------------------------------------
// Add breakpoint at a height  
// --------------------------------------
// 
// @param type Two options:
//     1. 'max'
//     2. 'mix'
//
@mixin HeightBreakpoint($px, $type: 'max') {
    $max-or-min: 'max-height';

    @if $type == 'min' {
        $max-or-min: 'min-height';
    }

    $value: $px;

    @if type-of($px) == 'string' {
        $value: map-get($height-breakpoints, $px);
    }

    @media screen and (#{$max-or-min}: em($value)) {
        @content;
    }
}

// --------------------------------------
// Add breakpoint  
// --------------------------------------
// 
// @param type Two options:
//     1. 'max'
//     2. 'mix'
//
@mixin Breakpoint($px, $type) {
    $max-or-min: 'max-width';

    @if $type == 'min' {
        $max-or-min: 'min-width';
    }

    $value: $px;

    @if type-of($px) == 'string' {
        $value: map-get($breakpoints, $px);
    }

    @media screen and (#{$max-or-min}: em($value)) {
        @content;
    }
}

@mixin column($columns, $gutter: null) {
    $width: 0;

    @if unitless($columns) {
        $width: percentage($columns / $max-columns);
    } @else {
        @error 'Mixin column() param \'$columns\' cannot have a unit';
    }

    display: inline-block;
    width: $width;
    float: left;

    @if $gutter != null {
        padding: {
            left: $gutter;
            right: $gutter;
        }
        box-sizing: border-box;
    } 
}

@mixin column-row($width: $column-row-width, $gutter: $column-gutter, $center: true) {
    @include clearfix;

    @if $width != false {
        @if unit($width) != 'rem' {
            $width: rem(strip-units($width));
        }

        max-width: $width;
    }

    @if $center == true {
        margin: {
            left: auto;
            right: auto;
        }
    }

    @if $gutter != false {
        padding: {
            left: $gutter;
            right: $gutter;
        }
    }
}
